pn1 <- '2016-7-29 18:55:00'
post.sessions <- subset(unique.sessions, start > (as.POSIXct(((as.Date(pn1))))))
post.sessions <- subset(unique.sessions, start > (as.POSIXct(((as.Date(pn1))))))
post.users <- unique(post.sessions$cognito.id)
both.pre <- filter(unique.sessions, cognito.id %in% post.users)
same.pre <- filter(unique.sessions, cognito.id %in% post.users)
filtered.sessions <- filter(unique.sessions, duration < 900)
post.sessions <- subset(filtered.sessions, start > (as.POSIXct(((as.Date(cutdate))))))
post.sessions <- subset(filtered.sessions, start > (as.POSIXct(((as.Date(cut.date))))))
cut.date <- '2016-07-29 14:51:00'
after.sessions <- filter(filtered.sessions, start > cut.date)
before.sessions <- filter(filtered.sessions, start <= cut.date)
filtered.sessions <- filter(unique.sessions, duration < 900)
pre.sessions.all <- filter(filtered.sessions, start <= cut.date)
post.users <- unique(post.sessions$cognito.id)
pre.sessions.both <- filter(pre.sessions.all, cognito.id %in% post.users)
post.sessions <- filter(filtered.sessions, start > cut.date)
filtered.sessions <- filter(unique.sessions, duration < 900)
cut.date <- '2016-07-29 18:55:00'
post.sessions <- filter(filtered.sessions, start > cut.date)
pre.sessions.all <- filter(filtered.sessions, start <= cut.date)
post.users <- unique(post.sessions$cognito.id)
pre.sessions.both <- filter(pre.sessions.all, cognito.id %in% post.users)
filtered.sessions <- filter(unique.sessions, duration < 900)
cut.date <- '2016-07-29 18:55:00'
post.sessions <- filter(filtered.sessions, start > cut.date)
pre.sessions.all <- filter(filtered.sessions, start <= cut.date)
post.users <- unique(post.sessions$cognito.id)
pre.sessions.both <- filter(pre.sessions.all, cognito.id %in% post.users)
pre.sessions.both$Segment <- 'Before'
post.sessions$Segment <- 'After'
total.sessions.both <- rbind(after.sessions, before.sessions)
m <- ggplot(total.sessions.both, aes(x=duration, fill=Segment)) + geom_density(alpha=.3) +
labs(y = "Density", x = "Seconds", title = "Session Length (Before and After)") +
scale_x_discrete(limits=c(0, 60, 180, 300, 420, 540, 660, 780),
labels = c("0 ", "1 min ", "3 min ", "5 min ", "7 min ", "9 min ", "11 min", "13 min "), name = "")
ggplotly(m)
View(pre.sessions.both)
View(post.sessions)
View(total.sessions.both)
total.sessions.both <- rbind(pre.sessions.both, post.sessions)
m <- ggplot(total.sessions.both, aes(x=duration, fill=Segment)) + geom_density(alpha=.3) +
labs(y = "Density", x = "Seconds", title = "Session Length (Before and After)") +
scale_x_discrete(limits=c(0, 60, 180, 300, 420, 540, 660, 780),
labels = c("0 ", "1 min ", "3 min ", "5 min ", "7 min ", "9 min ", "11 min", "13 min "), name = "")
ggplotly(m)
ggplot(total.sessions.both, aes(x=duration, fill=Segment)) + geom_density(alpha=.3) +
labs(y = "Density", x = "Seconds", title = "Session Length (Before and After)") +
scale_x_discrete(limits=c(0, 60, 180, 300, 420, 540, 660, 780),
labels = c("0 ", "1 min ", "3 min ", "5 min ", "7 min ", "9 min ", "11 min", "13 min "), name = "")
m <- ggplot(total.sessions.both, aes(x=duration, fill=Segment)) + geom_density(alpha=.3) +
labs(y = "Density", x = "Seconds", title = "Session Length (Before and After / Same Users)") +
scale_x_discrete(limits=c(0, 60, 180, 300, 420, 540, 660, 780),
labels = c("0 ", "1 min ", "3 min ", "5 min ", "7 min ", "9 min ", "11 min", "13 min "), name = "")
ggplotly(m)
avg.mean.both <- ddply(total.sessions.both, "Segment", summarise, duration.mean=mean(duration))
avg.median.both <- ddply(total.sessions.both, "Segment", summarise, duration.median=median(duration))
n <- m + geom_vline(data=avg.mean.both, aes(xintercept=duration.mean, colour=Segment),
linetype="dashed", size=1) +
labs(y = "Density", title = "Session Length (Before and After / Same Users) with mean")
ggplotly(n)
p <- m + geom_vline(data=avg.median.both, aes(xintercept=duration.median, colour=Segment),
linetype="dashed", size=1) +
labs(y = "Density", x = "", title = "Session Length (Before and After / Same Users) with median")
ggplotly(p)
var(pre.sessions.both$duration)
View(pre.sessions.both)
pre.means <- c()
for (i in 1:10000){
pre.sample <- pre.sessions.both[sample(1:nrow(mydata), 50, replace=TRUE),]
v <- mean(pre.sample$duration)
pre.means <- c(pre.means, v)
}
pre.means <- c()
seed(1234)
for (i in 1:10000){
pre.sample <- pre.sessions.both[sample(1:nrow(pre.sessions.both), 50, replace=TRUE),]
v <- mean(pre.sample$duration)
pre.means <- c(pre.means, v)
}
hist(pre.means)
mean(pre.means)
var(pre.means)
var(pre.means)^.5
post.means <- c()
for (i in 1:10000){
post.sample <- post.sessions[sample(1:nrow(post.sessions), 50, replace=TRUE),]
v <- mean(post.sample$duration)
post.means <- c(post.means, v)
}
mean(post.means)
hist(ppost.means)
hist(post.means)
var(post.means)^.5
pre.medians <- c()
for (i in 1:10000){
pre.sample <- pre.sessions.both[sample(1:nrow(pre.sessions.both), 50, replace=TRUE),]
v <- median(pre.sample$duration)
pre.median <- c(pre.median, v)
}
pre.medians <- c()
for (i in 1:10000){
pre.sample <- pre.sessions.both[sample(1:nrow(pre.sessions.both), 50, replace=TRUE),]
v <- median(pre.sample$duration)
pre.medians <- c(pre.medians, v)
}
hist(pre.medians)
median(pre.medians)
View(avg.mean.both)
View(avg.median.both)
View(avg.mean.both)
View(avg.mean)
filtered.sessions <- filter(unique.sessions, duration < 900)
after.sessions <- filter(filtered.sessions, start > cut.date)
before.sessions <- filter(filtered.sessions, start <= cut.date)
after.sessions <- filter(filtered.sessions, start > cut.date)
before.sessions <- filter(filtered.sessions, start <= cut.date)
before.sessions$Segment <- 'Before'
after.sessions$Segment <- 'After'
# bind data frames into one
total.sessions <- rbind(after.sessions, before.sessions)
avg.mean <- ddply(total.sessions, "Segment", summarise, duration.mean=mean(duration))
avg.median <- ddply(total.sessions, "Segment", summarise, duration.median=median(duration))
View(avg.mean)
View(avg.median)
View(avg.mean.both)
library(readr)
big_posts <- read_csv("C:/After6/after-data/contests/big_posts.csv")
View(big_posts)
published.posts <- filter(big_posts, published != NA)
published.posts <- filter(big_posts, published != 'NA')
published.posts <- big_posts[, complete.cases(big_posts$published)]
published.posts <- big_posts[complete.cases(big_posts$published), ]
library(lubridate)
published.posts$date <- ymd(published.posts$published)
class(published.posts$published)
ymd(published.posts$published[1])
?ymd
ymd(as.Date(published.posts$published[1]))
published.posts$date <- ymd(as.Date(published.posts$published))
post.counts <- plyr::count(published.posts, "date")
View(post.counts)
ggplot(post.counts, aes(x=date, y=freq)) + geom_line()
ggplotly()
ggplot(post.counts, aes(x=date, y=freq)) + geom_line() + geom_smooth()
ggplotly()
USER = "eventreader"
PASSWORD = "urXxzzb87tyRYHtKqp"
library(RPostgreSQL)
library(dplyr)
library(plyr)
postgresdriver <- dbDriver("PostgreSQL")
#http://docs.aws.amazon.com/redshift/latest/mgmt/connecting-from-psql.html
#https://blogs.aws.amazon.com/bigdata/post/Tx1G8828SPGX3PK/Connecting-R-with-Amazon-Redshift
#https://mobile.awsblog.com/post/Tx22DB1H8UNCDS9/Get-insights-into-your-mobile-app-usage-patterns-using-Amazon-Mobile-Analytics-a
#http://www.slideshare.net/AmazonWebServices/get-insights-into-your-app-usage-with-amazon-mobile-analytics-aws-mobile-web-day
redshift_connect <- dbConnect(postgresdriver,
host = "mobileanalyticsautoexporttoredshi-redshiftcluster-1y2nezarujs4v.c3njq5xys5sb.us-east-1.redshift.amazonaws.com",
port = "8192",
dbname = "events",
user = USER,
password = PASSWORD)
sessions <- dbGetQuery(redshift_connect,
"SELECT *
FROM
AWSMA.v_event
WHERE
event_type LIKE '_session.%'
AND
application_package_name = 'com.mixafter.after'")
sessions.start <- subset(sessions, event_type == '_session.start')
for (date in sessions.start$date){}
class(published.posts$date)
daily.counts <- data.frame(date= Date(0), users= integer(0))
daily.counts <- data.frame(date = as.Date(0), users = integer(0))
daily.counts <- data.frame(date = character(0), users = integer(0))
i <- 1
for (date in sessions.start$date){
temp <- filter(sessions.start, date == date)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- date
daily.counts$users[i] <- count
i <- i + 1
}
View(daily.counts)
View(sessions.start)
sessions.start$date <- ymd(as.Date(sessions.start$session_start_timestamp))
i <- 1
for (date in sessions.start$date){
temp <- filter(sessions.start, date == date)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- date
daily.counts$users[i] <- count
i <- i + 1
}
zz <- sessions.start$date[1]
zz
class(zz)
temp <- filter(sessions.start, date == zz)
length(unique(temp$client_cognito_id))
daily.counts$date[1] <- zz
daily.counts$date[1] <- as.character(zz)
View(daily.counts)
daily.counts <- data.frame(date = NA, users = NA)
View(daily.counts)
i <- 1
for (date in sessions.start$date){
temp <- filter(sessions.start, date == date)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- date
daily.counts$users[i] <- count
i <- i + 1
}
View(daily.counts)
daily.counts <- data.frame(date = NA, users = NA)
i <- 1
for (date in sessions.start$date){
temp <- filter(sessions.start, date == date)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- as.Date(date)
daily.counts$users[i] <- count
i <- i + 1
}
daily.counts <- data.frame(date = date, users = 0)
i <- 1
for (date in sessions.start$date){
temp <- filter(sessions.start, date == date)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- as.Date(date)
daily.counts$users[i] <- count
i <- i + 1
}
daily.counts <- data.frame(date = date, users = 0)
i <- 1
for (date in sessions.start$date){
temp <- filter(sessions.start, date == date)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- (date)
daily.counts$users[i] <- count
i <- i + 1
}
class(sessions.start$date)
class(sessions.start$date)[2]
qq <- sessions.start$date[2]
qq
daily.counts <- data.frame(date = qq, users = 0)
i <- 1
for (date in sessions.start$date){
temp <- filter(sessions.start, date == date)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- (date)
daily.counts$users[i] <- count
i <- i + 1
}
daily.counts <- data.frame(date = qq, users = 0)
i <- 1
for (date in sessions.start$date){
temp <- filter(sessions.start, date == date)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- date
daily.counts$users[i] <- count
i <- i + 1
}
unique(sessions.start$date)
dates <- unique(sessions.start$date)
daily.counts <- data.frame(date = qq, users = 0)
i <- 1
for (date in dates){
temp <- filter(sessions.start, date == date)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- date
daily.counts$users[i] <- count
i <- i + 1
}
daily.counts <- data.frame(date = qq, users = 0)
i <- 1
for (day in dates){
temp <- filter(sessions.start, date == day)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- date
daily.counts$users[i] <- count
i <- i + 1
}
daily.counts <- data.frame(date = qq, users = 0)
i <- 1
for (day in dates){
temp <- subset(sessions.start, date == day)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- date
daily.counts$users[i] <- count
i <- i + 1
}
daily.counts <- data.frame(date = dates, users = 0)
View(daily.counts)
class(daily.counts$date)
i <- 1
for (as.Date(day) in dates){
temp <- subset(sessions.start, date == day)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- date
daily.counts$users[i] <- count
i <- i + 1
}
i <- 1
for (as.Date(day) in dates){
temp <- subset(sessions.start, date == day)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- date
daily.counts$users[i] <- count
i <- i + 1
}
i <- 1
for (as.Date(day) in dates)){
temp <- subset(sessions.start, date == day)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- date
daily.counts$users[i] <- count
i <- i + 1
}
for (as.Date(day) in dates){
temp <- subset(sessions.start, date == day)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- date
daily.counts$users[i] <- count
i <- i + 1
}
class(dates)
dates.str <- as.character(dates)
i <- 1
for (day in dates.str){
temp <- subset(sessions.start, date == day)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- date
daily.counts$users[i] <- count
i <- i + 1
}
sessions.start$date <- as.character(sessions.start$date)
sessions.start$date[1]
daily.counts <- data.frame(date = dates, users = 0)
daily.counts <- data.frame(date = dates, users = 0)
daily.counts$date <- as.character(daily.counts$date)
i <- 1
for (day in dates.str){
temp <- subset(sessions.start, date == day)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- date
daily.counts$users[i] <- count
i <- i + 1
}
View(daily.counts)
dates.str
class(dat)
class(day)
day
daily.counts <- data.frame(date = dates, users = 0)
daily.counts$date <- as.character(daily.counts$date)
i <- 1
for (day in dates.str){
temp <- subset(sessions.start, date == day)
count <- length(unique(temp$client_cognito_id))
daily.counts$date[i] <- day
daily.counts$users[i] <- count
i <- i + 1
}
View(daily.counts)
as.Date(daily.counts$date[1])
daily.counts$date <- as.Date(daily.counts$date)
ggplot() + geom_line(data=post.counts, aes(x=date, y = freq)) +
geom_line(data=postcounts, aes(x=date,y=freq))
ggplot() + geom_line(data=post.counts, aes(x=date, y = freq)) +
geom_line(data=post.counts, aes(x=date,y=freq))
ggplot() + geom_line(data=post.counts, aes(x=date, y = freq)) + geom_line(data=post.counts, aes(x=date,y=freq))
ggplot() + geom_line(data=post.counts, aes(x=date, y = freq)) + geom_line(data=daily.counts, aes(x=date,y=freq))
ggplot() + geom_line(data=post.counts, aes(x=date, y = freq)) + geom_line(data=daily.counts, aes(x=date,y=users))
ggplotly()
ggplot() + geom_line(data=post.counts, aes(x=date, y = freq)) + geom_line(data=daily.counts, aes(x=date,y=users)) + geom_smooth()
ggplot() + geom_line(data=post.counts, aes(x=date, y = freq)) + geom_line(data=daily.counts, aes(x=date,y=users)) + xlim("2016-06-10", "2016-08-16")
ggplotly()
post.counts.filtered <- filter(post.counts, date >= "2016-06-10" & date < "2016-08-16")
daily.counts.filtered <- filter(daily.counts, date >= "2016-06-10" & date < "2016-08-16")
ggplot() + geom_line(data=post.counts.filtered, aes(x=date, y = freq)) + geom_line(data=daily.counts.filtered, aes(x=date,y=users))
ggplotly()
ggplot() + geom_line(data=post.counts.filtered, aes(x=date, y = freq, label = "Posts")) + geom_line(data=daily.counts.filtered, aes(x=date,y=users, label = "Users"))
ggplotly()
ggplot() + geom_line(data=post.counts.filtered, aes(x=date, y = freq, label = "Posts")) + geom_line(data=daily.counts.filtered, aes(x=date,y=users, color = "steelblue"))
ggplot() + geom_line(data=post.counts.filtered, aes(x=date, y = freq, label = "Posts")) + geom_line(data=daily.counts.filtered, aes(x=date,y=users, color = "Posts"))
ggplot() + geom_line(data=post.counts.filtered, aes(x=date, y = freq, color = "Users")) + geom_line(data=daily.counts.filtered, aes(x=date,y=users, color = "Posts"))
ggplotly()
ggplot() + geom_line(data=post.counts.filtered, aes(x=date, y = freq, color = "Users")) + geom_line(data=daily.counts.filtered, aes(x=date,y=users, color = "Posts")) + guides(color = FALSE)
ggplotly()
ggplot() + geom_line(data=post.counts.filtered, aes(x=date, y = freq, color = "Users")) + geom_line(data=daily.counts.filtered, aes(x=date,y=users, color = "Posts")) + guides(color = FALSE) + labs(x = "", y = "Count")
ggplot() + geom_line(data=post.counts.filtered, aes(x=date, y = freq, color = "Users")) + geom_line(data=daily.counts.filtered, aes(x=date,y=users, color = "Posts")) + guides(color = FALSE) + labs(x = "", y = "")
ggplotly()
ggplot() +  geom_line(data=daily.counts.filtered, aes(x=date,y=users)) + labs(x = "", y = "")
ggplotly()
ggplot() +  geom_line(data=daily.counts.filtered, aes(x=date,y=users)) + labs(x = "", y = "") + geom_smooth()
ggplot() + geom_line(data=daily.counts.filtered, aes(x=date,y=users)) + labs(x = "", y = "") + geom_smooth()
ggplot() + geom_line(data=daily.counts.filtered, aes(x=date,y=users)) + geom_smooth() + labs(x = "", y = "")
ggplot(daily.counts.filtered, aes(x=date, y=users)) + geom_line() + geom_smooth()
ggplotly()
myData <- left_join(daily.counts.filtered, post.counts.filtered)
View(myData)
myData$rate <- myData$freq / myData$users
ggplot(myData, aes(x=date, y=rate)) + geom_line() + geom_smooth()
ggplotly()
USER = "eventreader"
PASSWORD = "urXxzzb87tyRYHtKqp"
library(RPostgreSQL)
library(dplyr)
library(plyr)
postgresdriver <- dbDriver("PostgreSQL")
#http://docs.aws.amazon.com/redshift/latest/mgmt/connecting-from-psql.html
#https://blogs.aws.amazon.com/bigdata/post/Tx1G8828SPGX3PK/Connecting-R-with-Amazon-Redshift
#https://mobile.awsblog.com/post/Tx22DB1H8UNCDS9/Get-insights-into-your-mobile-app-usage-patterns-using-Amazon-Mobile-Analytics-a
#http://www.slideshare.net/AmazonWebServices/get-insights-into-your-app-usage-with-amazon-mobile-analytics-aws-mobile-web-day
redshift_connect <- dbConnect(postgresdriver,
host = "mobileanalyticsautoexporttoredshi-redshiftcluster-1y2nezarujs4v.c3njq5xys5sb.us-east-1.redshift.amazonaws.com",
port = "8192",
dbname = "events",
user = USER,
password = PASSWORD)
all.visits <- dbGetQuery(redshift_connect,
"SELECT
*
FROM
AWSMA.v_event
WHERE
event_type = 'visit'
")
# truncate lat and long for analysis
all.visits$lat.trunc <- substr(all.visits$a_latitude, 1, 6)
# one extra character in the substring to account for negative sign
all.visits$long.trunc <- substr(all.visits$a_longitude, 1, 7)
# count visits per user_id
visit.user.counts <- plyr::count(all.visits, "a_user_id")
# arrange by most visits to least
visit.user.counts <- dplyr::arrange(visit.user.counts,desc(freq))
visit.user.counts <- visit.user.counts[complete.cases(visit.user.counts), ]
id_vector <- unique(visit.user.counts$a_user_id)
for (i in 6:10){
id <- id_vector[i]
# create data frame for each user
temp.user <- dplyr::filter(all.visits, a_user_id == id)
temp.user.counts <- plyr::count(temp.user, c("lat.trunc", "long.trunc"))
temp.user.counts <- dplyr::arrange(temp.user.counts, desc(freq))
library(ggmap)
for (i in 1:4){
x.lat <- as.numeric(temp.user.counts$lat.trunc[i])
x.long <- as.numeric(temp.user.counts$long.trunc[i])
x.cords <- c(x.long, x.lat)
title <- paste("user_id:", id, ",", "visits:", temp.user.counts$freq[i])
temp.map <- get_map(location = x.cords, zoom = 18, maptype = "roadmap")
a <- ggmap(temp.map, extent = "device") +
geom_point(aes(x = as.numeric(a_longitude), y = as.numeric(a_latitude)), colour = "red", alpha = 0.1, size = 2, data = temp.user) +
ggtitle(title)
print(a)
invisible(readline(prompt="Press [enter] to continue"))
b <- ggmap(temp.map, extent = "device") +
#geom_density2d(data = temp.user,
#aes(x = as.numeric(a_longitude), y = as.numeric(a_latitude), size = 0.3)) +
stat_density2d(data = temp.user,
aes(x = as.numeric(a_longitude), y = as.numeric(a_latitude), fill = ..level.., alpha = ..level..), size = 0.01, bins = 16, geom = "polygon") +
scale_fill_gradient(low = "green", high = "red", guide = FALSE) +
scale_alpha(range = c(0, 0.5), guide = FALSE) +
ggtitle(title)
print(b)
invisible(readline(prompt="Press [enter] to continue"))
}
}
warnings)
warnings()
warnings()
warnings()
?t
?%*%
%*%
?apply
?exp
x = 3
exp(x)
pexp(6, 1/5, lower.tail = FALSE)
pexp(6, 1/5, lower.tail = TRUE)
library(blogdown)
serve_site()
setwd("C:/Users/Josh/Documents/GitHub/website-hugo")
serve_site()
mlbattendance_final = read.csv("mlbattendance_final.csv", header = TRUE)
require(faraway)
require(car)
require(leaps)
require(ggplot2)
attach(mlbattendance_final)
install.packages('faraway')
install.packages('car')
install.packages('leaps')
require(faraway)
require(car)
require(leaps)
require(ggplot2)
mlbattendance_final = read.csv("mlbattendance_final.csv", header = TRUE)
attach(mlbattendance_final)
summary(mlbattendance_final)
View(mlbattendance_final)
plot(x = currentAttend, y = nextAttend)
plot(x = currentW, y = priorW)
lm.model <- lm(currentW, ~priorW)
lm.model <- lm(currentW,~priorW)
lm.model <- lm(currentW ~priorW)
plot(lm.model)
lm.model
sumary(lm.model)
summary(lm.model)
